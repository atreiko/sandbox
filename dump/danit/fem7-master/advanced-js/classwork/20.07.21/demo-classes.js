// –∫–ª–∞—Å—Å—ã
/* –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ–±—ã—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º)
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É */
{
  class User {
    // –ø–æ —Å—É—Ç–∏ —Ç–∞ –∂–µ —Ñ—É–Ω–∫—Ü–∏—è-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    // –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ new User

    constructor(name) {
      this.name = name;
    }
    // –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –≤ –∫–ª–∞—Å—Å–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
    sayHi() {
      console.log(`Hello, ${this.name}`);
    }
    // –±–µ–∑ –∑–∞–ø—è—Ç–æ–π!
    sayBye() {
      console.log(`Bye, ${this.name}`);
    }

    get age() {
      return this._age;
    }

    set age(age) {
      this._age = age;
    }

    getSurname() {
      return this.surname;
    }

    setSurname(surname) {
      this.surname = surname;
    }
  }
  // –∫–ª–∞—Å—Å - —ç—Ç–æ –ø–æ —Å—É—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –≤–æ–∫—Ä—É–≥ —Ñ—É–Ω–∫—Ü–∏–∏-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é—â–∏—Ö –º–µ—Ç–æ–¥—ã –≤ prototype (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Object definrProperty)
  console.log(typeof User);
  // User - —ç—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞

  // üïÆ <cyberbiont> 9919ac5f-703f-4e1a-b694-1357dd4fafdb.md

  const user = new User('–í–∞—Å—è');
  user.sayHi();
  user.setSurname('–ö—É—Ä–æ–ª–µ—Å–æ–≤');
  user.age = 25;
  console.log(user.surname, user.age);
  user.setSurname('–ò–≤–∞–Ω–æ–≤');
  console.log(user.surname, user.age);

  for (const prop in user) {
    console.log(prop);
    // üïÆ <cyberbiont> a4575c66-8ad7-47c8-aefe-f42b9109b0b6.md
  }
}

/* class expression */
{
  // –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –±—ã–≤–∞—é—Ç Class Expression, Named Class Expression –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã
  const User = class {
    sayHi() {
      alert('–ü—Ä–∏–≤–µ—Ç');
    }
  };

  const User2 = class MyClass {
    sayHi() {
      console.log(MyClass);
    }
  };

  function makeClass(phrase) {
    // –æ–±—ä—è–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    return class {
      sayHi() {
        console.log(phrase);
      }
    };
  }
  const myClass = makeClass();
}

/* –≥–µ—Ç—Ç–µ—Ä—ã-—Å–µ—Ç—Ç–µ—Ä—ã */
// –º–æ–∂–Ω–æ –ª–∏ –≤ –∫–ª–∞—Å—Å–µ –æ–±—ä—è–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã get set?
// –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
// üïÆ <cyberbiont> 524342e5-da86-48fd-9115-1915dfb59d26.md

/* –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –º–æ–≥—É—Ç "–æ–±—â–∞—Ç—å—Å—è" –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º —Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é this */
{
  class Training {
    constructor(type, time, distance) {
      this.type = type;
      this.time = time;
      this.distance = distance;
      this.start();
    }

    start() {
      this.startTimer();
      this.trackDistance();
    }

    startTimer() {
      setTimeout(() => console.log('training is over!'), this.time);
    }

    trackDistance() {
      // this.distance...
    }
  }

  const training = new Training('running', 100, 20);
}

/* –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã */
{
  class Training {
    constructor(type, time, distance) {
      this.type = type;
      this._time = time;
      this.distance = distance;
      this.startTimer();
    }

    startTimer() {
      setTimeout(() => console.log('training is over!'), this._time);
    }

    method() {}

    static create(type) {
      switch (type) {
        case 'running':
          return new Training('running', 30, 12);
        case 'biking':
          return new Training('biking', 90, 30);
      }
    }
  }

  console.log(Training);

  const training = Training.create('biking');
  console.log(training);
  // training.startTimer();
  // training.create();
  console.log(training.type);
}

/* –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
–Ω–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Å–≤-–≤–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: #propName
–ø–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–≤-–≤–∞ _protectedProp
—ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏, —á—Ç–æ —Ç–∞–∫–∏–µ —Å–≤-–≤–∞ —è–≤–ª—è—é—Ç—Å—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏
*/

/* –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ */

class Animal {
  constructor(name) {
    this.name = name;
    this.eaten = 0;
  }

  eat(food) {
    this.eaten += food;
    console.log(`${this.name} —É–∂–µ —Å—ä–µ–ª: ${this.eaten}`);
  }
}

// –ù–∞—Å–ª–µ–¥—É–µ–º –æ—Ç Animal —É–∫–∞–∑—ã–≤–∞—è "extends Animal"
class Cat extends Animal {
  // –µ—Å–ª–∏ —Å–≤–æ–µ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –Ω–µ—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è
  meow() {
    console.log(`${this.name}: m—è—É!`);
  }
}

class Dog extends Animal {
  woof() {
    console.log(`${this.name}: –≥–∞–≤!`);
  }
}

const animal = new Animal('animal');

const cat = new Cat('–∫–æ—Ç');

console.log(cat.name);
cat.eat(5);
cat.meow();
cat.eat(10);

const dog = new Dog('–ø–µ—Å');
dog.eat(10);
dog.woof();

/* –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Å –ø–æ–º–æ—â—å—é super */
// üïÆ <cyberbiont> 1b9c6a4d-e85f-40b5-97a9-d1d5fdf7242b.md
{
  class Cat extends Animal {
    meow() {
      console.log(`${this.name}: –º—è—É!`);
    }

    eat(food) {
      super.eat(food); // –≤—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
      this.meow();
    }
  }

  const cat = new Cat('–∫–æ—Ç—è—Ä–∞');

  cat.eat(5);
}

class EstonianCat extends Cat {
  meow() {
    // —É —Ñ—É–Ω–∫—Ü–∏–π-—Å—Ç—Ä–µ–ª–æ–∫ –Ω–µ—Ç —Å–≤–æ–µ–≥–æ super
    setTimeout(() => super.meow(), 2000); // –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ 2 —Å
  }
}

const estonianCat = new EstonianCat('—ç—Å—Ç–æ–Ω—Å–∫–∏–π –∫–æ—Ç');
estonianCat.meow();

// –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞

class Elephant extends Animal {
  constructor(name, earsDiameter) {
    // - –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å this –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø–æ—Ç–æ–º–∫–∞,
    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ super
    // –ø—Ä–∏ —ç—Ç–æ–º –ø–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    super(name);
    this.earsDiameter = earsDiameter;
  }
}

const elephant = new Elephant('Dumbo', 5);
console.log(elephant);
elephant.eat(40);
// instanceOf
// –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ (—Å—Å—ã–ª–∫–∞ –≤ [[Prototype]] –æ–±—ä–µ–∫—Ç–∞ –∏ .prototype –∫–ª–∞—Å—Å–∞, —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
// —Å–≤–æ–π—Å—Ç–≤–æ constructor —Ç—É—Ç —Ä–æ–ª–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç
console.log(elephant instanceof Elephant);
console.log(elephant instanceof Dog);
console.log(elephant instanceof Cat);
console.log(elephant instanceof Animal);
