'use strict';
/* –ú–ê–°–°–ò–í–´ */
/* –ø–æ —Å—É—Ç–∏, —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–π.
–∞ —Ç–∞–∫–∂–µ —Å–≤–æ–π—Å—Ç–≤–æ–º length –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
—Ç.–∫. —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã:
- –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ —Å—Å—ã–ª–∫–µ
- –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π, –≤ —Ç.—á. –æ–±—ä–µ–∫—Ç—ã - —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–µ –º–∞—Å—Å–∏–≤—ã
—É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –Ω–∞–º –≤–∞–∂–µ–Ω –∏–º–µ–Ω–Ω–æ –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */

/* –°–∏–Ω—Ç–∞–∫—Å–∏—Å */
const arr = []; // –æ—Å–Ω–æ–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è

// –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
console.log(typeof arr);
console.log(Array.isArray(arr));

// sparse arrays üïÆ <cyberbiont> e45a4843-a507-4938-9998-00fd78ea7d1a.md

const pos = ['first', 'second', 'third'];
// –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
// —á—Ç–æ –ª–æ–≥–∏—á–Ω–æ, –µ—Å–ª–∏ –∏–º–µ—Ç—å –≤ –≤–∏–¥—É, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–∞–º–∏ - —á–∏—Å–ª–æ–≤—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
// –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –Ω—É–ª—è, –∫–∞–∫ –≤ —Å—Ç—Ä–æ–∫–∞—Ö

console.log(pos[0]);
console.log(pos[1]);
// üïÆ <cyberbiont> c10bfeb7-dfff-4e6b-b9c2-16641382b71e.md

// –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è
pos[0] = 'left';
console.log(pos);

{
  /* length */
  // –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ 1 –±–æ–ª—å—à–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–µ–º
  // –∫–∞–∫ –∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
  const pos = ['first', 'second', 'third'];
  console.log(pos.length);

  // –≤—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
  console.log(pos[pos.length - 1]);

  console.log('string'.length, 'string'[5]);
  // –æ—á–∏—Å—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞
  pos.length = 0;
  console.log(pos);

  const newArr = new Array(5).fill(2);
  console.log(newArr);
}

/* –ú–ï–¢–û–î–´ */
{
  /* –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞ */
  const array = ['first', 'second', 'third'];

  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    console.log(value);
  }

  for (const value of array) console.log(value);
  /* –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ i */

  array.forEach((value, i, array) => {
    console.log(i, value);
  });
  // –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å break / continue;
  // –∫–æ–ª–ª–±—ç–∫ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≥–¥–µ-—Ç–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ (—á—Ç–æ —É–¥–æ–±–Ω–æ)

  // —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

  /* MAP */
  // map –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–µ –º—É—Ç–∏—Ä—É–µ—Ç)
  const newArray = array.map((value) => value.toUpperCase());
  console.log(newArray);
  console.log(array);

  const skippedArr = array.map((value, index) => {
    if (index % 2) return;
    return value;
  });

  // üïÆ <cyberbiont> d07e83b8-628b-46f1-b9cd-d5d63b1b94d9.md
  console.log(skippedArr);

  // Reduce üïÆ <cyberbiont> c4f3721b-b767-4dfe-9935-f42d7de29714.md
}

/* –î–û–ë–ê–í–õ–ï–ù–ò–ï, –£–î–ê–õ–ï–ù–ò–ï –ò –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í */
{
  // –ú—É—Ç–∏—Ä—É—é—Ç (–∏–∑–º–µ–Ω—è—é—Ç) –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
  const array = ['first', 'second', 'third'];

  console.log(array.push('fourth', 'fifth'));
  console.log(array);

  console.log(array.pop());
  console.log(array);

  // unshift –∏ shift —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É —è–≤–ª—è—é—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω—ã–º–∏
  console.log(array.unshift('zeroth'));
  console.log(array);

  console.log(array.shift());
  console.log(array);
}
{
  // slice - –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω –æ–¥–Ω–æ–∏–º–µ–Ω–Ω–æ–º—É –º–µ—Ç–æ–¥—É —É —Å—Ç—Ä–æ–∫. –Ω–µ –º—É—Ç–∏—Ä—É—é—â–∏–π
  const array = ['first', 'second', 'third'];
  console.log(array.slice(1, 2));
  console.log(array.slice());

  // splice - –º—É—Ç–∏—Ä—É—é—â–∏–π. –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  console.log(array.splice(2));
  console.log(array);

  // –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ–¥—Ä—è–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å
  // —Ç—Ä–µ—Ç–∏–π –∏ –¥–∞–ª–µ–µ - —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏–º –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
  array.splice(1, 1, 'newSecond');
  console.log(array);

  // –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –≤—Å—Ç–∞–≤–∏—Ç—å, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è—Ç—å,
  // –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ –ª–æ–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (0, null, false...) –≤—Ç–æ—Ä—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º!
  array.splice(1, 0, 'insertedBetween');
  console.log(array);

  // –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å, —É–¥–∞–ª—è—é—Ç—Å—è –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞
  array.splice(1);
  console.log(array);

  // –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
  // üïÆ <cyberbiont> 14245682-0ff5-4608-8198-1c387ca6caef.md
}

{
  /* –ü–û–ò–°–ö */
  // –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –º—É—Ç–∏—Ä—É—é—Ç –º–∞—Å—Å–∏–≤
  /* –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å—Ç—Ä–æ–∫–∞–º: indexOf/lastIndexOf –∏ includes */
  const array = ['a', 'b', 'c', 41, 'b', false];
  console.log(array.includes('b'));
  console.log(array.indexOf('N'));
  console.log(array.lastIndexOf('b'));
  // –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ ===
  console.log(array.indexOf(null));

  /* find / findIndex */
  // –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  console.log(
    // –ø–æ —Å—É—Ç–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ indexOf, –Ω–æ –º–æ–∂–µ–º –∑–∞–¥–∞–≤–∞—Ç—å —Å–≤–æ–µ —É—Å–ª–æ–≤–∏–µ, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–≥–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
    array.findIndex((value, index, array) => {
      // –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å true, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç
      return typeof value !== 'string';
    }),
  );
  // —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
  console.log(array.findIndex((value) => typeof value !== 'string'));
  // find –≤–æ–∑–≤—Ä–∞—à–∞–µ—Ç –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ
  console.log(array.find((value) => typeof value !== 'string'));

  // some / every  - –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç true / false –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω / –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç
  console.log(array.some((value) => typeof value !== 'string'));
  console.log(array.every((value) => typeof value === 'string'));

  /* Filter */
  // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è. –ù–µ –º—É—Ç–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
  console.log(array.filter((value) => typeof value === 'string'));
  // console.log(array);
}

{
  /* JOIN */
  // –º–µ—Ç–æ–¥, –æ–±—Ä–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥—É split —É —Å—Ç—Ä–æ–∫. –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø–∞—Ä–µ
  const array = ['first', 'second', 'third'];
  const joinedString = array.join('-');
  console.log(joinedString);
  console.log(joinedString.split('-'));
}

/* –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï */
// reverse, sort - –º—É—Ç–∏—Ä—É—é—Ç –º–∞—Å—Å–∏–≤
{
  const arr = [1, 2, 15, 4];
  console.log(arr.reverse());

  console.log(arr.sort());
  // üïÆ <cyberbiont> 95e29506-fcd1-4e38-b988-6925633afa9f.md

  const arr2 = [1, 2, 15, 4];
  // –Ω–∞–¥–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–π –∫–æ–ª–ª–±—ç–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  console.log(
    arr2.sort((a, b) => {
      if (a > b) return 1;
      if (a == b) return 0; // –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è
      if (a < b) return -1;
    }),
  );
  // –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É–ª–æ—Å—å –ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ a > b
  // –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ
  // —Ç.–µ. –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫
  const arr3 = [1, 2, 15, 4];
  console.log(arr3.sort((a, b) => a - b));
}

/* FLAT */
{
  const nestedArray = [
    [1, 2],
    [3, 4],
    [5, 6, [7, 8]],
  ];
  console.log(nestedArray.flat());
  console.log(nestedArray.flat(2));
}

// üïÆ <cyberbiont> 30d62e71-be85-45ea-9bd2-29b0910f0fe6.md

// concat
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const arr3 = [6, 7, 8];
console.log(arr1.concat(arr2, arr3));
console.log([].concat(arr1, arr2, arr3));
